import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Load dataset
df = pd.read_csv("Titanic-Dataset.csv")

# Display first few rows
print(df.head())

# Summary for numeric columns
print("Summary Statistics:")
print(df.describe())

# Summary for categorical columns
print("\nCategorical Summary:")
print(df.describe(include='object'))

# Select numeric columns
numeric_cols = df.select_dtypes(include=np.number).columns.tolist()

# Histograms
df[numeric_cols].hist(figsize=(12, 10), bins=15)
plt.suptitle("Histograms of Numeric Features")
plt.tight_layout()
plt.show()

# Boxplots
for col in numeric_cols:
    plt.figure(figsize=(6, 4))
    sns.boxplot(y=df[col])
    plt.title(f'Boxplot of {col}')
    plt.show()

# Correlation matrix
plt.figure(figsize=(10, 6))
sns.heatmap(df[numeric_cols].corr(), annot=True, cmap='coolwarm', fmt=".2f")
plt.title("Correlation Matrix")
plt.show()

# Pairplot (only selected features to avoid clutter)
selected_cols = ['Age', 'Fare', 'Pclass', 'Survived']
sns.pairplot(df[selected_cols], hue="Survived", diag_kind="hist")
plt.suptitle("Pairplot of Selected Features", y=1.02)
plt.show()

# Highly correlated features
cor_matrix = df[numeric_cols].corr()
high_corr = cor_matrix[(cor_matrix > 0.7) & (cor_matrix < 1.0)]
print("Highly Correlated Pairs (corr > 0.7):")
print(high_corr.dropna(how='all').dropna(axis=1, how='all'))

# Outlier Detection using IQR
for col in numeric_cols:
    Q1 = df[col].quantile(0.25)
    Q3 = df[col].quantile(0.75)
    IQR = Q3 - Q1
    outliers = df[(df[col] < Q1 - 1.5 * IQR) | (df[col] > Q3 + 1.5 * IQR)]
    if not outliers.empty:
        print(f"\nOutliers in {col}:")
        print(outliers[[col]])

# Correlation with target (Survived)
print("\nCorrelation of Numeric Features with 'Survived':")
for col in numeric_cols:
    if col != 'Survived':
        corr = df['Survived'].corr(df[col])
        print(f"{col}: Correlation = {corr:.2f}")

# Range of features
print("\nFeature Ranges:")
for col in numeric_cols:
    print(f"{col}: Range = {df[col].max() - df[col].min():.2f}")



